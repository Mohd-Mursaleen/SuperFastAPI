const fs = require('fs').promises;
const path = require('path');
const chalk = require('chalk');
const handlebars = require('handlebars');

/**
 * Project Generator
 * 
 * Handles the actual project creation logic including validation,
 * directory creation, and file generation.
 */
class ProjectGenerator {
  constructor(projectName, options = {}) {
    this.projectName = projectName;
    this.projectPath = path.resolve(process.cwd(), projectName);
    this.templatesPath = path.resolve(__dirname, '..', 'templates');
    
    // Supabase feature flags
    this.supabaseDatabase = options.supabaseDatabase || false;
    this.supabaseAuth = options.supabaseAuth || false;
    
    // Template variables for handlebars rendering
    this.templateVars = {
      PROJECT_NAME: projectName,
      PROJECT_DESCRIPTION: `A FastAPI project generated by SuperFastAPI CLI`,
      AUTHOR_NAME: 'Your Name <your.email@example.com>',
      PYTHON_VERSION: '^3.11',
      FASTAPI_VERSION: '^0.104.1',
      UVICORN_VERSION: '^0.24.0',
      SUPABASE_DATABASE: this.supabaseDatabase,
      SUPABASE_AUTH: this.supabaseAuth,
      supabaseDatabase: this.supabaseDatabase,  // For template compatibility
      supabaseAuth: this.supabaseAuth           // For template compatibility
    };
  }

  /**
   * Generate the FastAPI project
   */
  async generate() {
    // Validate project name
    this.validateProjectName();
    
    // Check if directory already exists
    await this.checkDirectoryExists();
    
    // Create project directory
    await this.createProjectDirectory();
    
    // Generate all files from templates
    await this.generateFromTemplates();
    
    console.log(chalk.yellow(`‚úÖ FastAPI project '${this.projectName}' created successfully!`));
    console.log(chalk.blue(`üìÅ Project directory: ${this.projectPath}`));
    console.log(chalk.yellow('\n Next steps:'));
    console.log(chalk.white(`  cd ${this.projectName}`));
    console.log(chalk.white('  poetry install'));
    console.log(chalk.green('\nüöÄRUN:- sh start.sh OR poetry run uvicorn app.main:app --reload '));

    // Add Supabase-specific next steps if features are enabled
    if (this.supabaseDatabase || this.supabaseAuth) {
      console.log(chalk.cyan('\nüìã Supabase Configuration:'));
      console.log(chalk.white('  1. Create a new project at https://supabase.com'));
      console.log(chalk.white('  2. Copy your project URL and anon key'));
      console.log(chalk.white('  3. Update the .env file with your Supabase credentials'));
      
      if (this.supabaseAuth) {
        console.log(chalk.white('  4. Copy your service role key for authentication features'));
        console.log(chalk.white('  5. Configure authentication providers in your Supabase dashboard'));
      }
    }
    
  }

  /**
   * Validate the project name
   */
  validateProjectName() {
    if (!this.projectName) {
      throw new Error('Project name is required');
    }

    // Check for valid project name (alphanumeric, hyphens, underscores)
    const validNameRegex = /^[a-zA-Z0-9_-]+$/;
    if (!validNameRegex.test(this.projectName)) {
      throw new Error('Project name can only contain letters, numbers, hyphens, and underscores');
    }

    // Check length
    if (this.projectName.length < 1 || this.projectName.length > 50) {
      throw new Error('Project name must be between 1 and 50 characters');
    }
  }

  /**
   * Check if the project directory already exists
   */
  async checkDirectoryExists() {
    try {
      await fs.access(this.projectPath);
      throw new Error(`Directory '${this.projectName}' already exists`);
    } catch (error) {
      // If the directory doesn't exist, that's what we want
      if (error.code !== 'ENOENT') {
        throw error;
      }
    }
  }

  /**
   * Create the project directory
   */
  async createProjectDirectory() {
    try {
      await fs.mkdir(this.projectPath, { recursive: true });
    } catch (error) {
      throw new Error(`Failed to create project directory: ${error.message}`);
    }
  }

  /**
   * Generate all project files from templates
   */
  async generateFromTemplates() {
    try {
      // Define the base project structure to create
      const projectStructure = [
        // Root level files
        { template: 'pyproject.toml.hbs', output: 'pyproject.toml' },
        { template: 'README.md.hbs', output: 'README.md' },
        { template: '.gitignore.hbs', output: '.gitignore' },
        { template: 'example.env.hbs', output: 'example.env'},
        { template: 'start.sh.hbs', output: 'start.sh' },
        // App directory and files
        { template: 'app/__init__.py.hbs', output: 'app/__init__.py' },
        { template: 'app/main.py.hbs', output: 'app/main.py' },
        { template: 'app/core/__init__.py.hbs', output: 'app/core/__init__.py'},
        { template: 'app/core/config.py.hbs', output: 'app/core/config.py'},
        { template: 'app/api/__init__.py.hbs', output: 'app/api/__init__.py' },
        { template: 'app/api/routes/__init__.py.hbs', output: 'app/api/routes/__init__.py' },
        { template: 'app/api/schemas/__init__.py.hbs', output: 'app/api/schemas/__init__.py' },
        { template: 'app/services/__init__.py.hbs', output: 'app/services/__init__.py' },
        { template: 'app/models/__init__.py.hbs', output: 'app/models/__init__.py' },
        { template: 'app/db/__init__.py.hbs', output: 'app/db/__init__.py' },
        { template: 'app/utils/__init__.py.hbs', output: 'app/utils/__init__.py' },

        // Tests directory and files
        { template: 'tests/__init__.py.hbs', output: 'tests/__init__.py' }
      ];

      // Add Supabase-specific templates based on feature flags
      if (this.supabaseDatabase) {
        projectStructure.push(
          { template: 'app/db/supabase.py.hbs', output: 'app/db/supabase.py' }
        );
      }

      if (this.supabaseAuth) {
        projectStructure.push(
          { template: 'app/services/auth.py.hbs', output: 'app/services/auth.py' },
          { template: 'app/api/middleware/auth.py.hbs', output: 'app/api/middleware/auth.py' },
          { template: 'app/api/routes/auth.py.hbs', output: 'app/api/routes/auth.py' },
          { template: 'app/models/user.py.hbs', output: 'app/models/user.py' }
        );
      }

      // Generate each file from its template
      for (const item of projectStructure) {
        await this.generateFileFromTemplate(item.template, item.output);
      }
      
    } catch (error) {
      throw new Error(`Failed to generate project files: ${error.message}`);
    }
  }

  /**
   * Generate a single file from a template
   */
  async generateFileFromTemplate(templatePath, outputPath) {
    try {
      // Read the template file
      const templateFullPath = path.join(this.templatesPath, templatePath);
      const templateContent = await fs.readFile(templateFullPath, 'utf8');
      
      // Compile and render the template with variables
      const template = handlebars.compile(templateContent);
      const renderedContent = template(this.templateVars);
      
      // Ensure the output directory exists
      const outputFullPath = path.join(this.projectPath, outputPath);
      const outputDir = path.dirname(outputFullPath);
      await fs.mkdir(outputDir, { recursive: true });
      
      // Write the rendered content to the output file
      await fs.writeFile(outputFullPath, renderedContent, 'utf8');
      
      console.log(chalk.gray(`  ‚úì Created ${outputPath}`));
      
    } catch (error) {
      throw new Error(`Failed to generate ${outputPath} from ${templatePath}: ${error.message}`);
    }
  }

  /**
   * Read and render a template file
   */
  async renderTemplate(templatePath, variables = {}) {
    try {
      const templateFullPath = path.join(this.templatesPath, templatePath);
      const templateContent = await fs.readFile(templateFullPath, 'utf8');
      
      // Merge provided variables with default template variables
      const mergedVars = { ...this.templateVars, ...variables };
      
      const template = handlebars.compile(templateContent);
      return template(mergedVars);
    } catch (error) {
      throw new Error(`Failed to render template ${templatePath}: ${error.message}`);
    }
  }

  /**
   * Create a directory if it doesn't exist
   */
  async ensureDirectory(dirPath) {
    try {
      await fs.mkdir(dirPath, { recursive: true });
    } catch (error) {
      throw new Error(`Failed to create directory ${dirPath}: ${error.message}`);
    }
  }

  /**
   * Write content to a file, creating directories as needed
   */
  async writeFile(filePath, content) {
    try {
      const dir = path.dirname(filePath);
      await this.ensureDirectory(dir);
      await fs.writeFile(filePath, content, 'utf8');
    } catch (error) {
      throw new Error(`Failed to write file ${filePath}: ${error.message}`);
    }
  }
}

module.exports = { ProjectGenerator };