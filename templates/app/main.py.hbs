from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from app.db.supabase import SupabaseClient
from contextlib import asynccontextmanager
import sys
import logging  

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup events
    try:
        logger.info("Starting up ...")
        
        supabase = SupabaseClient()
        supabase.initialize_supabase()
        logger.info("DB initialized successfully")
    except Exception as e:
        logger.error(f"Error during startup: {e}")
        raise
    
    yield
    
    # Shutdown events
    try:
        logger.info("Shutting down ...")
        
    except Exception as e:
        logger.error(f"Error during shutdown: {e}") 

app = FastAPI(
    title="{{PROJECT_NAME}}",
    description="{{PROJECT_DESCRIPTION}}",
    version="0.1.0",
    lifespan=lifespan
)

# Set up CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure this properly for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/")
async def root():
    """Root endpoint"""
    return {"message": "Welcome to {{PROJECT_NAME}}"}


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "{{PROJECT_NAME}}"}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)