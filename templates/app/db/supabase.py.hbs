{{#if SUPABASE_DATABASE}}
"""
Supabase client implementation with modern async patterns.
Provides connection management, error handling, and singleton pattern.
"""

from supabase import create_client, Client
import os
from dotenv import load_dotenv
from typing import Optional
# Load environment variables
load_dotenv()

# Supabase connection parameters
SUPABASE_URL = os.getenv("SUPABASE_URL", "")
SUPABASE_KEY = os.getenv("SUPABASE_ANON_KEY", "")

supabase: Client = None

class SupabaseClient:
    """
    Singleton Supabase client with connection management and error handling.
    
    This class provides a centralized way to interact with Supabase,
    implementing modern async patterns and proper error handling.
    """
    
    _instance: Optional['SupabaseClient'] = None
    _client: Optional[Client] = None
    
    def initialize_supabase(self):
        """Initialize the Supabase client if not already initialized."""
        global supabase
        if supabase is None:
            supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
        return supabase
    
    def get_supabase_client(self) -> Client:
        """Returns the Supabase client instance."""
        global supabase
        if supabase is None:
            supabase = self.initialize_supabase()
        return supabase


{{/if}}